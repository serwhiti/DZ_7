# Треугольник. Дан треугольник из натуральных чисел: в первой строке одно число, во второй - два числа, в третьей - три и т.д. Например: 5 3 4 2 4 5 6 8 2 4 
# Робот Петя в начальный находится на вершине треугольника и каждый следующий момент времени двигается к одному соседей числа внизу. 
# Робот заканчивает свою работу когда достигает основание треугольника. Постройте такой путь передвижения по треугольнику, чтобы сумма чисел на пути робота оказалась 
# минимально возможной. Ввод и вывод организовать при помощи текстовых файлов. В первой строке входного файла записано число N (1<N<13) - количество строк в 
# треугольнике, в последующих N строках записаны числа треугольника построчно. Каждое из чисел не превосходит 99. В выходной файл нужно записать в первую строку путь 
# робота в виде строки из символов L и R (L-переход к левому соседу, R - переход к правому соседу), в во вторую строку - минимальную сумму, соответствующую этому пути. 

input_filename = input("Введите имя файла: ")
with open(input_filename, 'r') as f:
    s = int(f.readline())
    triangle = []
    for i in range(s):
        row = list(map(int, f.readline().split()))
        triangle.append(row)
min_sum = [[0] * s for i in range(n)]
min_sum[0][0] = triangle[0][0]
for i in range(1, s):
    for j in range(i + 1):
        if j == 0:
            min_sum[i][j] = min_sum[i-1][j] + triangle[i][j]
        elif j == i:
            min_sum[i][j] = min_sum[i-1][j-1] + triangle[i][j]
        else:
            min_sum[i][j] = min(min_sum[i-1][j], min_sum[i-1][j-1]) + triangle[i][j]
min_path_sum = min(min_sum[s-1])
path = ''
j = min_sum[s-1].index(min_path_sum)
for i in range(s-1):
    if j == 0 or min_sum[s-2-i][j-1] < min_sum[s-2-i][j]:
        path += 'R'
        j += 1
    else:
        path += 'L'
path = path[::-1]
with open('output.txt', 'w') as f:
    f.write(path + '\n')
    f.write(str(min_path_sum))
